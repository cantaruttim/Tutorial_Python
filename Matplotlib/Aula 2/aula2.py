# -*- coding: utf-8 -*-
"""aula2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xHFFYje3C-ZpGWjtzfGn6TvM4k9VGiql

# Parte 1
## Lendo o arquivo .csv + gráfico simples
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

df = pd.read_csv('dados.csv', sep = ';')
df

df.info()

# Podemos selecionar apenas uma coluna do DataFrame
df['Experiencia']

# Podemos transformar ele em um array (precisamos do Numpy)

df['Experiencia'].values

df['salario'].values

plt.figure(figsize=(20,8))
plt.style.use("bmh")

plt.title("Salario dos Desenvolvedores")
# Passando os dados do dataframe para o gráfico

plt.plot(df['Experiencia'].values, df['salario'].values,
         color = 'black', linestyle = '-.' ,marker = 'o')

plt.grid(True)
plt.show()

"""# Parte 2 : Adicionando a equação da reta no gráfico"""

### VAMOS ADICIONAR A EQUAÇAO DA RETA NO GRÁFICO
## Método .iloc

# df['Experiencia'].values
X = df.iloc[:, 0].values
y = df.iloc[:, 1].values

print( "Valor de X e de y",

    print('Menor valor de X:', np.min(X), ';',
          'Maior valor de X:', np.max(X)) ,
    print('Menor valor de y:', np.min(y), ';',
          'Maior valor de y:', np.max(y))

)

"""$$m = \frac{y1 - y2}{X1 - X2}$$"""

m = ( (np.max(y) - np.min(y)) / (np.max(X) - np.min(X) ) )
m

"""$$b = y - (m * X1)$$"""

b = np.min(y) - m * np.min(X)
b

m, b

## vamos criar uma lista de valores de X para plotar no gráfico
## Lembrando que para plotar uma reta precisamos apenas de dois pontos.

X_values = [np.min(X) - 1, np.max(X) + 1]
X_values, type(X_values)

## Modo convencional
for x_val in X_values:
     print(m * x_val + b)

y_values = [m * x_val + b for x_val in X_values]
y_values, type(y_values)

print(plt.style.available)

plt.style.use("classic")

plt.figure(figsize = (18, 5))

plt.title("Salário + Equação")
plt.plot(X, y, color = 'black', marker = 'o', label = 'Salários')
plt.plot(X_values, y_values, color = 'red', linestyle = '-.',
         label = "Reta: y = {:.2f}x + {:.2f}".format(m, b))

plt.legend(loc="upper left")
plt.tight_layout()
plt.show()

"""# Parte 3 : Treinando um regressor e plotando a reta no gráfico"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

X, y

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state=42)

X_train, X_test

y_train, y_test

# Vamos construir a reta com base nesses dados
### Dados de Teste

m_test = ( (max(y) - min(y))  / (max(X_test) - min(X_test)))
m_test

b_test = np.min(y_test) - m * np.min(X_test)
b_test

m, b, m_test, b_test

X_values_test = [np.min(X_test) - 1, np.max(X_test) + 1]
X_values_test, type(X_values_test)

y_values_test = [m_test * x_val_test + b_test for x_val_test in X_values_test]
y_values_test, type(y_values_test)

plt.style.use("classic")

plt.figure(figsize = (18, 5))

plt.title("Salário + Equações")
plt.plot(X, y, color = 'black', marker = 'o', label = 'Salários')

## Reta sem o Regressor Linear
plt.plot(X_values, y_values, color = 'red', linestyle = '-',
         label = "Reta: y = {:.2f}x + {:.2f}".format(m, b))

## Reta com o Regressor Linear
plt.plot(X_values_test, y_values_test, color = 'purple', linestyle = '--',
         label = "Reta Regressor: y = {:.2f}x + {:.2f}".format(m_test, b_test))


plt.legend(loc="upper left")
plt.tight_layout()
plt.show()